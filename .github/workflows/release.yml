#
#  Copyright 2020 The ModiTect authors
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

name: Release

on:
  push:
    branches: [ master ]

jobs:
  Release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.event.head_commit.message, '[release]')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache Maven
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Import GPG key
        env:
          GPG_SECRET_KEYS: ${{ secrets.MODITECT_GPG_SECRET_KEYS }}
        run: |
          echo $GPG_SECRET_KEYS | base64 --decode | gpg --import --no-tty --batch --yes

      - name: Configure git
        run: |
          git config user.email "moditectbot@moditect.org"
          git config user.name "moditectbot"

      - name: Build Maven
        env:
          GPG_PASSPHRASE: ${{ secrets.MODITECT_GPG_PASSPHRASE }}
          SONATYPE_USERNAME: ${{ secrets.MODITECT_SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.MODITECT_SONATYPE_PASSWORD }}
        run: mvn -B --file pom.xml -s .mvn/release-settings.xml release:prepare release:perform -Drelease -Dgpg.passhrase=${GPG_PASSPHRASE} -Dcentral.username=${SONATYPE_USERNAME} -Dcentral.password=${SONATYPE_PASSWORD}

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload JAR
        id: upload-jar
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./layrry-launcher/target/layrry-launcher-${{ steps.get_version.outputs.VERSION }}-all.jar
          asset_name: layrry-launcher-${{ steps.get_version.outputs.VERSION }}-all.jar
          asset_content_type: application/java-archive

      - name: Upload ZIP
        id: upload-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./layrry-launcher/target/distributions/layrry-launcher-${{ steps.get_version.outputs.VERSION }}-dist.zip
          asset_name: layrry-launcher-${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip

      - name: Upload TAR
        id: upload-tgz
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./layrry-launcher/target/distributions/layrry-launcher-${{ steps.get_version.outputs.VERSION }}-dist.tar.gz
          asset_name: layrry-launcher-${{ steps.get_version.outputs.VERSION }}.tar.gz
          asset_content_type: application/gzip
